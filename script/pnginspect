#!/home/ben/software/install/bin/perl

use warnings;
use strict;
use Image::PNG::Libpng ':all';
use Data::Dumper;

# Ok to connect to web?

my $web_ok;

eval {
    require Data::Validate::URI;
    Data::Validate::URI->import (qw/is_web_uri/);
    require LWP::Simple;
    LWP::Simple->import ();
    $web_ok = 1;
};

if ($@) {
    $web_ok = 0;
}

binmode STDOUT, ":encoding(utf8)";

for my $file (@ARGV) {
    my $png;
    my $size;
    if (-f $file) {
	eval {
	    $png = read_png_file ($file);
	};
	if ($@) {
	    warn "Could not read '$file': $@";
	    next;
	}
	$size = -s $file;
    }
    else {
	if ($web_ok) {
	    if (is_web_uri ($file)) {
		print "Getting '$file' from web.\n";
		my $png_data = get ($file);
		if ($png_data) {
		    $png = read_from_scalar ($png_data);
		    $size = length ($png);
		}
		else {
		    warn "Could not download '$file', skipping.\n";
		}
	    }
	    else {
		warn "Cannot find a file called '$file', skipping.\n";
		next;
	    }
	}
	else {
	    warn "Modules needed to read from web not installed";
	}
    }

    print "Contents of '$file':\n\n";
    print "File size: $size\n";
    my $ihdr = $png->get_IHDR ();
    for my $k (sort keys %$ihdr) {
	# Display key
	my $dk = $k;
	$dk = ucfirst ($dk);
	$dk =~ s/_/ /g;
	print "$dk: ";
	if ($k eq 'color_type') {
	    print color_type_name ($ihdr->{$k});
	}
	elsif ($k eq 'interlace_method') {
	    # Interlace method
	    my $im = $ihdr->{$k};
	    # Displayed interlace method
	    my $dim = 'Unknown';
	    if ($im == 0) {
		$dim = 'None';
	    }
	    elsif ($im == 1) {
		$dim = 'ADAM7';
	    }
	    print $dim;
	}
	else {
	    print $ihdr->{$k};
	}
	print "\n";
    }
    my $valid = $png->get_valid ();
    for my $key (sort keys %$valid) {
	if ($valid->{$key}) {
	    print "Valid $key chunk";
	    if ($key eq 'IDAT' || $key eq 'tIME') {
		print ".\n";
	    }
	    elsif ($key eq 'PLTE') {
		my $plte = $png->get_chunk ($key);
		printf " containing %d colours as follows (CSS format):\n",
		       scalar (@$plte);
		print_PLTE ($plte);
		print "\n";
	    }
	    elsif ($key eq 'tRNS') {
		my $trns = $png->get_chunk ($key);
		printf " containing %d values as follows:\n",
		       scalar (@$trns);
		my $dtrns = join ", ", @$trns;
		print "$dtrns\n";
	    }
	    else {
		my $value = $png->get_chunk ($key);
		print " as follows:\n";
		print Dumper ($value);
	    }
	}
    }
    my $text = $png->get_text ();
    if ($text) {
	my $i = 0;
        for my $t (@$text) {
	    $i++;
            print "Text chunk $i:\n";
            for my $k (sort keys %$t) {
                my $v = $t->{$k};
                if (! defined $v) {
                    $v = 'undefined';
                }
		if ($k eq 'compression') {
		    $v = text_compression_name ($v);
		}
                print "$k: $v\n";
            }
            print "\n";
        }
    }
    my $time = $png->get_tIME ();
    if ($time) {
	print "Modification time:\n";
	for my $k (qw/year month day hour minute second/) {
	    print "$k: $time->{$k}\n";
	}
    }
    print "\n";
}

sub print_PLTE
{
    my ($plte) = @_;
    my $col = 10;
    my $i = 0;
    for my $rgb (@$plte) {
	printf "#%02X%02X%02X ", $rgb->{red}, $rgb->{green}, $rgb->{blue};
	$i++;
	if (($i % $col) == 0) {
	    print "\n";
	}
    }

}

__END__

=pod

=head1 NAME

pnginspect - print contents of PNG files

=head1 SYNOPSIS

    pnginspect a.png b.png c.png

=head1 DESCRIPTION

Print a text representation of the data within a PNG image file to
standard output. It reads the PNG file, prints out its header
information and its valid chunks, and then attempts to read all the
chunks. Most of the chunks are printed using
L<Data::Dumper>. Modification time and text segments are printed
specially.

The image data is not currently printed out.

If you have L<Data::Validate::URI> and L<LWP::Simple> installed, you
can also use it to examine PNG files on the web, like this:

    pnginspect http://libpng.org/pub/png/img_png/libpng-88x31.png

These modules are not installed by default.

=head1 SEE ALSO

=over

=item L<Image::PNG::Libpng>

=back

=head1 AUTHOR

Ben Bullock <bkb@cpan.org>

=cut

# Local variables:
# mode: perl
# End:
